// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ordersdomain "github.com/itimky/gopher-up-march-2024/pkg/orders/domain"
	mock "github.com/stretchr/testify/mock"
)

// Mockdb is an autogenerated mock type for the db type
type Mockdb struct {
	mock.Mock
}

type Mockdb_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockdb) EXPECT() *Mockdb_Expecter {
	return &Mockdb_Expecter{mock: &_m.Mock}
}

// AddOrder provides a mock function with given fields: ctx, params
func (_m *Mockdb) AddOrder(ctx context.Context, params ordersdomain.AddOrderParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for AddOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ordersdomain.AddOrderParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockdb_AddOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrder'
type Mockdb_AddOrder_Call struct {
	*mock.Call
}

// AddOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - params ordersdomain.AddOrderParams
func (_e *Mockdb_Expecter) AddOrder(ctx interface{}, params interface{}) *Mockdb_AddOrder_Call {
	return &Mockdb_AddOrder_Call{Call: _e.mock.On("AddOrder", ctx, params)}
}

func (_c *Mockdb_AddOrder_Call) Run(run func(ctx context.Context, params ordersdomain.AddOrderParams)) *Mockdb_AddOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ordersdomain.AddOrderParams))
	})
	return _c
}

func (_c *Mockdb_AddOrder_Call) Return(_a0 error) *Mockdb_AddOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockdb_AddOrder_Call) RunAndReturn(run func(context.Context, ordersdomain.AddOrderParams) error) *Mockdb_AddOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockdb creates a new instance of Mockdb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdb(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockdb {
	mock := &Mockdb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
