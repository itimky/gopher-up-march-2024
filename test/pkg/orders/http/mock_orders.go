// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ordersdomain "github.com/itimky/gopher-up-march-2024/pkg/orders/domain"
	mock "github.com/stretchr/testify/mock"
)

// Mockorders is an autogenerated mock type for the orders type
type Mockorders struct {
	mock.Mock
}

type Mockorders_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockorders) EXPECT() *Mockorders_Expecter {
	return &Mockorders_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function with given fields: ctx, params
func (_m *Mockorders) CreateOrder(ctx context.Context, params ordersdomain.CreateOrderParams) (*ordersdomain.CreateOrderResult, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *ordersdomain.CreateOrderResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ordersdomain.CreateOrderParams) (*ordersdomain.CreateOrderResult, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ordersdomain.CreateOrderParams) *ordersdomain.CreateOrderResult); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ordersdomain.CreateOrderResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ordersdomain.CreateOrderParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockorders_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type Mockorders_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - params ordersdomain.CreateOrderParams
func (_e *Mockorders_Expecter) CreateOrder(ctx interface{}, params interface{}) *Mockorders_CreateOrder_Call {
	return &Mockorders_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, params)}
}

func (_c *Mockorders_CreateOrder_Call) Run(run func(ctx context.Context, params ordersdomain.CreateOrderParams)) *Mockorders_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ordersdomain.CreateOrderParams))
	})
	return _c
}

func (_c *Mockorders_CreateOrder_Call) Return(_a0 *ordersdomain.CreateOrderResult, _a1 error) *Mockorders_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockorders_CreateOrder_Call) RunAndReturn(run func(context.Context, ordersdomain.CreateOrderParams) (*ordersdomain.CreateOrderResult, error)) *Mockorders_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockorders creates a new instance of Mockorders. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockorders(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockorders {
	mock := &Mockorders{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
